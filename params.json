{
  "name": "Parallelized Monte Carlo Tree Search for Go",
  "tagline": "Qiankun Zhuang, Yepeng Yin, 15-618 Final Project",
  "body": "## Proposal\r\n### Summary\r\nWe are going to explore serveral Monte Carlo Tree Search(MCTS) parallelization approaches and parallelize MCTS on GPU using CUDA. Finally we will compare the performance between different parallelization methods on Go.\r\n\r\n### Background\r\nGo is one of the oldest board games originated in ancient China. Due to its large board and more alternatives for each move, this game has been considered very challenging for computer. \r\n\r\nIn the very recent game in March 2016, AlphaGo developed by Google beat Lee Sedol 9-dan for the first time. AlphaGo utilized Monte Carlo Search Tree and Value Network and Policy Network implemented using deep learning technology. In this project, we are going to explore the possibility of paralleling Monte Carlo Search Tree.\r\n\r\nMonte Carlo Tree Search is a variant of Monte Carlo method, which are methods based on repeated random sampling. In the area of chess, it means for each state of board, make many different random moves until the end, and use the win-loss ratio to help determine the best next move. But since the search space of Go is too large, traditional Monte Carlo method cannot give a precise answer. Monte Carlo Tree Search can help with this problem.\r\n\r\n### Challenge\r\nTree searching algorithms are hard to parallelize, especially when GPU is considered. The main challenge of this project will be how to utilize GPU to parallelize MCTS in an efficient way. There are several problems we need to handle:\r\n* CPU, GPU communication. Since the cost of communication between CPU and GPU is expensive, this brings up the problem of how to minimize the data movement.\r\n* Work assignment. The simulation step in MCTS will be random, which will result in imbalanced work.\r\n* Concurrence. Parallelization among single node will have concurrent problem when comes into back-propagation step. We need to solve concurrency problem while not sacrifice the performance.\r\n\r\n### Deliverables\r\n* Go AI powered by parallel Monte Carlo Tree Search on CPU,GPU and hybrid of CPU and GPU.\r\n* Graphs showing the speedup with sequential MCTS implementation as benchmark.\r\n* Our AI should be able to compete with other AI online. Graphs showing the win ratio with different implementations will be made.\r\n* If have more time, we will implement UI for user to play against our AI.\r\n\r\n### Platform\r\n* Cluster: Since our main goal is to parallelize MCTS on GPU, so ghc or latedays cluster is a good choice for us.\r\n* Language: C++. High performance, object-oriented (game design for Go), CUDA compile-able.\r\n\r\n| Date:               | TODO:                                                                                          | Result: |\r\n|-------------------------------------|-------------------------------------------------------------------------------------|---------|\r\n| April 1 - Apri 7      | Proposal; Implement sequential MCTS on CPU; Implement parallel MCTS on CPU                     |         |\r\n| April 8 - April 14    | Continue parallel MCTS on CPU; Start implement MCTS on GPU with leaf-parallel scheme           |         |\r\n| April 15 - April 21   | Implement MCTS on GPU with block-parallel scheme                                               |         |\r\n| April 22 - April 28   | Run experiments and make graphs of speedup; Compete with other AI and make graphs of win ratio |         |\r\n| April 29 - May 5      | Final Tuning; Prepare for presentation                                                         |         |\r\n### Reference\r\n_[1] Rocki, Kamil, and Reiji Suda. \"Parallel Monte Carlo Tree Search on GPU.\" SCAI. 2011._",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}